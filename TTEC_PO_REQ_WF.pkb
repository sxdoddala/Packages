create or replace PACKAGE BODY      ttec_po_req_wf
AS
   /* $Header: TTEC_PO_REQ_WF.pkb 11.5.10 2006/02/10 22:09:14 sreddy  $ */

   /*== START ================================================================================================*\
      Author: Surya Reddy(Solbourne) - Created
        Date: 02/10/2006
   Call From: REQAPPRV Workflow
        Desc: Procedures called by customizations to the REQAPPRV Workflow.

     Modification History:

    Version    Date     Author   Description (Include Ticket#)
    -------  --------  --------  ------------------------------------------------------------------------------
        1.0  02/10/06  Solbourne Initial Version
        1.1  09/25/09  MDodge    Restricted Conversion Rate lookup in custom_validate_req_dist to 'Spot' rates only.
                                 Added Error loggin to capture current production issues better.
        1.2  07/13/10  MDodge    1. I#138568 - Budget calculation should be SUM(debit) - SUM(credit).
                                 2. R#21372  - Mod custom_validate_req_header to use ttec_capital_expenditures_v
                                    to calculate commitments to ensure common calculation across CapExp customs.
        1.3  12/23/10  MDodge    Updated logic to compare Run Date against Budget active date range instead of
                                 latest_year_opened and use Sysdate Year to calculate budget amount.
        1.4  10/28/10  Elango    R229564 - FOR PO Budget Validation added new procedure budget_valiation
        2.0  11/11/11  MDOdge    R12 Retrofit - Removed obsolete procedures copy_category_from_dff
                                 , update_req_line_category.  Revert to R12 v1.0 in VSS if needed.
        2.1  11/11/11  MDodge    Merged code for CREATEPO WF package 'TTEC_REQ_PO_WF' into this package as names
                                 were confusingly similar.  Package originally created by Elango Pandu on June 15
                                 , 2009.  Package includes 3 custom procedures:
                                    - go_buyer
                                    - get_default_buyer
                                    - should_doc_be_approved
        3.0  05/09/19  Chandra    Removed auto Approval thrushold condition
		
		1.0  05/02/23  MXKEERTHI(ARGANO)     R12.2 Upgrade Remediation  

   \*== END ==================================================================================================*/
   
   g_package       VARCHAR2 (30)  := 'TTEC_PO_REQ_WF';
   g_progress      VARCHAR2 (100);
   g_po_wf_debug   VARCHAR2 (1)   := 'N';

   /* ****************************************************************************** *
   --
   -- PROCEDURE budget_validation
   --   This procedure will check if there are any CapEx Budgets on the PR and validate
   --   if this is sufficient available balance left for the request.  If not the
   --   PR will be REJECTED and returned to the user.
   -- IN
   --   itemtype  - A valid item type from (WF_ITEM_TYPES table).
   --   itemkey   - A string generated by call to AOL's INITIALIZE routine
   --   actid     - ID of activity this process is called from.
   --   funcmode  - Run/Cancel
   -- OUT
   --   Result
   --     FAIL
   --     SUCCESS
   --
   * ****************************************************************************** */
   PROCEDURE budget_validation (
      p_itemtype   IN              VARCHAR2,
      p_itemkey    IN              VARCHAR2,
      p_actid      IN              NUMBER,
      p_funcmode   IN              VARCHAR2,
      x_result     OUT NOCOPY      VARCHAR2
   )
   IS
      v_document_id   NUMBER;
      v_req_num       po_requisition_headers_all.segment1%TYPE;
      -- CapEx Budget Calc Variables
      v_project       gl_code_combinations.segment2%TYPE;
      v_margin_pct    NUMBER                                     := 0;
      v_budget_amt    NUMBER                                     := 0;
      v_commits       NUMBER                                     := 0;
      v_remain        NUMBER                                     := 0;
      v_ntfy_remain   NUMBER                                     := 0;
      v_flag          VARCHAR2 (1)                               := 'Y';
      v_req_user      fnd_user.user_name%TYPE;
      v_err           VARCHAR2 (100);

      -- Requestor User Name -> Use the requester with the larger amount if more than one.
      CURSOR requester
      IS
         SELECT   pap.GLOBAL_NAME
             FROM po_requisition_lines_all rl, per_all_people_f pap
            WHERE rl.requisition_header_id = v_document_id
              AND pap.person_id = rl.to_person_id
              AND TRUNC (SYSDATE) BETWEEN pap.effective_start_date
                                      AND pap.effective_end_date
         GROUP BY pap.GLOBAL_NAME
         ORDER BY SUM (rl.unit_price * rl.quantity) DESC;

      -- Percent allowed over buget.  As this is a Value Set and can allow more than
      -- one active record, only select the 1st active record.
      CURSOR margin_pct_c
      IS
         SELECT NVL (ffv.flex_value, 0) margin_pct
           FROM fnd_flex_value_sets ffvs, fnd_flex_values ffv
          WHERE ffvs.flex_value_set_name = 'CUSTOM_EXPENDITURE_BUDGET_PERCENT'
            AND ffv.flex_value_set_id = ffvs.flex_value_set_id
            AND ffv.enabled_flag = 'Y'
            AND SYSDATE BETWEEN NVL (ffv.start_date_active, SYSDATE)
                            AND NVL (ffv.end_date_active, SYSDATE)
            AND ROWNUM = 1;

      -- Get unique Projects and their Totals on the Req for Validation against Budget.
      -- All Capital Expenditure items will be costed to a 'C%' client code.
      CURSOR projects_c
      IS
         SELECT   gcc.segment2 project,
                  NVL
                     (SUM
                         (  (rd.req_line_quantity * rl.unit_price)
                          * (CASE
                                WHEN NVL (sob.currency_code, 'USD') = 'USD'
                                   THEN 1
                                ELSE (SELECT NVL (conversion_rate, 1)
                                        FROM gl_daily_rates
                                       WHERE from_currency = sob.currency_code
                                         AND to_currency = 'USD'
                                         AND conversion_type =
                                                'Spot'
                                              /* 1.1 - Spot Rate limitation */
                                         AND conversion_date = TRUNC (SYSDATE))
                             END
                            )
                         ),
                      0
                     ) project_total
             FROM po_req_distributions_all rd,
                  po_requisition_lines_all rl,
                  po_requisition_headers_all rh,
                  gl_code_combinations gcc,
                  gl_sets_of_books sob
            WHERE rh.requisition_header_id = rl.requisition_header_id
              AND rh.requisition_header_id = v_document_id
              AND rl.requisition_line_id = rd.requisition_line_id
              AND gcc.code_combination_id = rd.code_combination_id
              AND gcc.segment2 LIKE 'C%'
              AND sob.set_of_books_id = rd.set_of_books_id
         GROUP BY gcc.segment2
         ORDER BY gcc.segment2;

      -- Get the Budget amount for the Project to be validated.
      CURSOR budget_c (l_project gl_code_combinations.segment2%TYPE)
      IS
         SELECT   NVL (SUM (period_net_dr), 0)
                - NVL (SUM (period_net_cr), 0) budget_balance      /* 1.2-1 */
		   --START R12.2 Upgrade Remediation
		   /*
		   Commented code by MXKEERTHI-ARGANO, 05/02/2023
           FROM gl.gl_budgets gb,
                gl.gl_budget_versions gbv,
                gl.gl_balances gbl,
                gl.gl_code_combinations gcc
			*/
			--  code Added  by MXKEERTHI-ARGANO, 05/02/2023
		   FROM APPS.gl_budgets gb,
                APPS.gl_budget_versions gbv,
                APPS.gl_balances gbl,
                APPS.gl_code_combinations gcc
			
			--END R12.2.10 Upgrade remediation
			
          WHERE TRUNC (SYSDATE) BETWEEN TO_DATE
                                            (first_valid_period_name,
                                             'MON-RR')               /* 1.3 */
                                    AND   ADD_MONTHS
                                             (TO_DATE (last_valid_period_name,
                                                       'MON-RR'
                                                      ),
                                              1
                                             )
                                        - 1
            AND gb.attribute1 = 'Y'     -- Identifies this as a Capital Budget
            AND gbv.budget_name = gb.budget_name
            AND gbv.version_num = gb.current_version_id
            AND gbl.period_year =
                                TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                                                     /* 1.3 */
            AND gbl.budget_version_id = gbv.budget_version_id
            AND gcc.code_combination_id = gbl.code_combination_id
            AND gcc.segment2 = l_project
            AND gcc.segment4 = '1799';

      -- Get total existing commitments from shared view /* 1.2-2 */
      CURSOR commits_c (
         l_project         gl_code_combinations.segment2%TYPE,
         l_req_header_id   NUMBER
      )
      IS
         SELECT NVL
                   (SUM (NVL (ROUND (  commit_amount
                                     * (CASE
                                           WHEN NVL (commit_currency, 'USD') =
                                                                         'USD'
                                              THEN 1
                                           ELSE (SELECT NVL (conversion_rate,
                                                             1
                                                            )
                                                   FROM gl_daily_rates
                                                  WHERE from_currency =
                                                               commit_currency
                                                    AND to_currency = 'USD'
                                                    AND conversion_type =
                                                                        'Spot'
                                                    AND conversion_date =
                                                               TRUNC (SYSDATE))
                                        END
                                       ),
                                     2
                                    ),
                              0
                             )
                        ),
                    0
                   ) commit_amt
           FROM ttec_capital_expenditures_v
          WHERE TO_CHAR (commit_date, 'YYYY') = TO_CHAR (SYSDATE, 'YYYY')
            AND client = l_project
            AND pr_header_id != l_req_header_id;
   BEGIN
      v_document_id :=
         wf_engine.getitemattrnumber (itemtype      => p_itemtype,
                                      itemkey       => p_itemkey,
                                      aname         => 'DOCUMENT_ID'
                                     );
      v_req_num :=
         wf_engine.getitemattrnumber (itemtype      => p_itemtype,
                                      itemkey       => p_itemkey,
                                      aname         => 'DOCUMENT_NUMBER'
                                     );

      -- Get Margin Percentage allowed over budget
      OPEN margin_pct_c;

      FETCH margin_pct_c
       INTO v_margin_pct;

      CLOSE margin_pct_c;

      -- Validate each Unique Project on Req
      FOR projects_r IN projects_c
      LOOP
         -- Get Project Budget (created in USD)
         OPEN budget_c (projects_r.project);

         FETCH budget_c
          INTO v_budget_amt;

         CLOSE budget_c;

         -- Get Total Commitals in USD /* 1.2-2 */
         OPEN commits_c (projects_r.project, v_document_id);

         FETCH commits_c
          INTO v_commits;

         CLOSE commits_c;

         v_remain := (v_budget_amt * (1 + v_margin_pct) - v_commits);
         v_ntfy_remain := v_budget_amt - v_commits;

         IF projects_r.project_total > NVL (v_remain, 0)
         THEN
            v_flag := 'N';
            v_project := projects_r.project;
            EXIT;
         END IF;
      END LOOP;

      IF v_flag = 'N'
      THEN
         OPEN requester;

         FETCH requester
          INTO v_req_user;

         CLOSE requester;

         wf_engine.setitemattrtext (itemtype      => p_itemtype,
                                    itemkey       => p_itemkey,
                                    aname         => 'TTEC_REQUESTER_USER_NAME',
                                    avalue        => v_req_user
                                   );
         wf_engine.setitemattrtext (itemtype      => p_itemtype,
                                    itemkey       => p_itemkey,
                                    aname         => 'TTEC_BDGT_REMAIN',
                                    avalue        => v_remain
                                   );
         wf_engine.setitemattrtext (itemtype      => p_itemtype,
                                    itemkey       => p_itemkey,
                                    aname         => 'TTEC_BDGT_PROJECT',
                                    avalue        => v_project
                                   );
         x_result := 'COMPLETE:FAIL';
      ELSE
         x_result := 'COMPLETE:SUCCESS';
         RETURN;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         v_err := SUBSTR (SQLERRM, 1, 25);
         x_result := 'COMPLETE:FAIL';
         wf_core.CONTEXT (g_package, 'update_req_line_category', g_progress);
         RAISE;
   END budget_validation;

   PROCEDURE go_buyer (
      itemtype    IN              VARCHAR2,
      itemkey     IN              VARCHAR2,
      actid       IN              NUMBER,
      funcmode    IN              VARCHAR2,
      resultout   OUT NOCOPY      VARCHAR2
   )
   IS
   BEGIN
      resultout := 'Y';
   END go_buyer;

   PROCEDURE get_default_buyer (
      itemtype    IN              VARCHAR2,
      itemkey     IN              VARCHAR2,
      actid       IN              NUMBER,
      funcmode    IN              VARCHAR2,
      resultout   OUT NOCOPY      VARCHAR2
   )
   IS
      x_suggested_buyer_id   NUMBER;
      x_organization_id      NUMBER;
      x_progress             VARCHAR2 (300);
      v_org_name             VARCHAR2 (300);
      v_buyer                VARCHAR2 (300);
      v_person_id            NUMBER;
      l_validate_result      VARCHAR2 (1)   := fnd_api.g_true;

      CURSOR c_get_org
      IS
         SELECT UPPER (organization_name)
           FROM org_organization_definitions
          WHERE organization_id = x_organization_id;

      CURSOR c_get_buyer
      IS
         SELECT UPPER (description)
           FROM fnd_lookup_values_vl
          WHERE lookup_type = 'TTEC_PO_AUTO_BUYER_LIST'
            AND UPPER (meaning) = v_org_name;

      CURSOR c_get_personid
      IS
         SELECT person_id
           FROM per_all_people_f
          WHERE SYSDATE BETWEEN effective_start_date AND effective_end_date
            AND UPPER (full_name) = v_buyer;
   BEGIN
      x_organization_id :=
         po_wf_util_pkg.getitemattrnumber (itemtype      => itemtype,
                                           itemkey       => itemkey,
                                           aname         => 'ORGANIZATION_ID'
                                          );

      IF x_organization_id IS NOT NULL
      THEN
         OPEN c_get_org;

         FETCH c_get_org
          INTO v_org_name;

         CLOSE c_get_org;

         IF v_org_name IS NOT NULL
         THEN
            OPEN c_get_buyer;

            FETCH c_get_buyer
             INTO v_buyer;

            CLOSE c_get_buyer;

            IF v_buyer IS NOT NULL
            THEN
               OPEN c_get_personid;

               FETCH c_get_personid
                INTO v_person_id;

               CLOSE c_get_personid;
            END IF;
         END IF;
      END IF;

      IF v_person_id IS NOT NULL
      THEN
         x_suggested_buyer_id := v_person_id;
         po_wf_util_pkg.setitemattrnumber (itemtype      => itemtype,
                                           itemkey       => itemkey,
                                           aname         => 'SUGGESTED_BUYER_ID',
                                           avalue        => x_suggested_buyer_id
                                          );
      END IF;

      IF (x_suggested_buyer_id IS NULL OR l_validate_result = fnd_api.g_false
         )
      THEN                                                       -- bug2821542
         resultout := wf_engine.eng_completed || ':' || 'ACTION_FAILED';
      ELSE
         resultout := wf_engine.eng_completed || ':' || 'ACTION_SUCCEEDED';
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         wf_core.CONTEXT ('po_autocreate_doc',
                          'get_buyer_from_req_line',
                          x_progress
                         );
         RAISE;
   END get_default_buyer;

   PROCEDURE should_doc_be_approved (
      itemtype    IN              VARCHAR2,
      itemkey     IN              VARCHAR2,
      actid       IN              NUMBER,
      funcmode    IN              VARCHAR2,
      resultout   OUT NOCOPY      VARCHAR2
   )
   IS
      x_auto_approve_doc   VARCHAR2 (1);
      x_progress           VARCHAR2 (300);
      v_tot                NUMBER                              := 0;
      v_threshold_limit    NUMBER                              := 0;
      v_header_id          NUMBER;
      v_rate               NUMBER                              := 0;
      x_organization_id    NUMBER;
      v_org_name           VARCHAR2 (300);
      v_buyer              VARCHAR2 (300);
      v_person_id          NUMBER;
      v_currency           po_headers_all.currency_code%TYPE;      --1.2
      r_out                 varchar2(5);
      CURSOR c_tot
      IS
         SELECT   SUM (NVL (unit_price, 1) * NVL (quantity, 1)),
                  a.currency_code                                       --1.2
             FROM apps.po_headers_all a, po_lines_all b
            WHERE a.po_header_id = v_header_id
              AND a.po_header_id = b.po_header_id
         GROUP BY a.currency_code;

      CURSOR c_get_org
      IS
         SELECT *--UPPER (organization_name)
           FROM org_organization_definitions
          WHERE organization_id = x_organization_id;

      CURSOR c_get_rate
      IS
         SELECT tag
           FROM fnd_lookup_values_vl
          WHERE lookup_type = 'TTEC_PO_AUTO_BUYER_LIST'
            AND UPPER (meaning) = v_org_name;

      CURSOR c_get_threshold
      IS
         SELECT description
           FROM fnd_lookup_values_vl
          WHERE lookup_type = 'TTEC_PO_AUTOAPPROVE_THRESHOLD'
            AND UPPER (meaning) = 'GLOBAL';
   BEGIN
--Commented by Chandra 3.0
/*
    x_organization_id   := po_wf_util_pkg.getitemattrnumber( itemtype => itemtype, itemkey => itemkey, aname => 'ORG_ID' );

    IF x_organization_id IS NOT NULL THEN

      OPEN c_get_org;

      FETCH c_get_org INTO v_org_name;

      CLOSE c_get_org;

      IF v_org_name IS NOT NULL THEN

        OPEN c_get_rate;

        FETCH c_get_rate INTO v_rate;

        CLOSE c_get_rate;

      END IF;

    END IF;

    v_header_id         :=
      po_wf_util_pkg.getitemattrnumber( itemtype => itemtype, itemkey => itemkey, aname => 'AUTOCREATED_DOC_ID' );

    OPEN c_tot;

    FETCH c_tot
    INTO v_tot, v_currency;                                                                                        --1.2

    CLOSE c_tot;

    IF v_currency != 'USD' THEN                                                                                    --1.2
      v_tot   := NVL( v_tot, 0 ) * NVL( v_rate, 0 );
    END IF;

    OPEN c_get_threshold;

    FETCH c_get_threshold INTO v_threshold_limit;

    CLOSE c_get_threshold;

    IF v_tot <= v_threshold_limit THEN
      resultout   := wf_engine.eng_completed || ':' || 'Y';

      -- Set 'Is Automatic Approval Allowed' attribute to 'Y'
      wf_engine.setitemattrtext( itemtype   => itemtype
                               , itemkey    => itemkey
                               , aname      => 'AUTO_APPROVE_DOC'
                               , avalue     => 'Y' );

    ELSE
      resultout   := wf_engine.eng_completed || ':' || 'N';
    END IF;*/
    --Commented by Chandra 3.0
    x_organization_id :=
         po_wf_util_pkg.getitemattrnumber (itemtype      => itemtype,
                                           itemkey       => itemkey,
                                           aname         => 'ORG_ID'
                                          );


    FOR I IN c_get_org
        LOOP
             if upper(i.organization_name) like '%PERCEPTA%'
                THEN
                    resultout := wf_engine.eng_completed || ':' || 'N';
                     wf_engine.setitemattrtext (itemtype      => itemtype,
                                 itemkey       => itemkey,
                                 aname         => 'AUTO_APPROVE_DOC',
                                 avalue        => 'N'
                                );
                 ELSE
                    resultout   := wf_engine.eng_completed || ':' || 'Y';
                     wf_engine.setitemattrtext (itemtype      => itemtype,
                                 itemkey       => itemkey,
                                 aname         => 'AUTO_APPROVE_DOC',
                                 avalue        => 'Y'
                                );
        end if;
        END LOOP;
--      resultout := wf_engine.eng_completed || ':' || 'Y';
      -- Set 'Is Automatic Approval Allowed' attribute to 'Y'

   EXCEPTION
      WHEN OTHERS
      THEN
         wf_core.CONTEXT ('po_autocreate_doc',
                          'should_doc_be_approved',
                          x_progress
                         );
         RAISE;
   END should_doc_be_approved;

   /* **************************************************************************************************************** *
   -- PROCEDURE Launch_Parallel_Approval
   --   This is a replacement of the standard Procedure POR_AME_REQ_WF_PVT.Launch_Parallel_Approval.
   --   It will launch the custom TTEC_AME_PARALLEL_APPROVAL WF Process instead of standard.
   -- Note: Should ALWAYS be copied from most current version of standard.  Refer to MD70
   --   for details of what mods should be made and where.
   -- Function:
   --   Workflow activity PL/SQL handler. This procedure is used to send the notification for the approvers.
   --   Iterate through the list of approvers got from the API call ame_api2.getNextApprovers4.
   --   Get the next approver name from the global variable g_next_approvers and for each retrieved approver
   --   separate workflow process is kicked. Each process is called child process.
   --   If there are 3 approvers, then 3 child process will be created and each of them will be notified at the same time.
   --
   --   If the next approver record is of Position Hierarchy type, then the users associated to the position_id will be
   --   retrieved, will be alphabetically sorted using last_name and to the first user notification will be sent.
   * ****************************************************************************************************************** */
   PROCEDURE launch_parallel_approval (
      itemtype    IN              VARCHAR2,
      itemkey     IN              VARCHAR2,
      actid       IN              NUMBER,
      funcmode    IN              VARCHAR2,
      resultout   OUT NOCOPY      VARCHAR2
   )
   IS
      l_progress                  VARCHAR2 (500)                     := '000';
      l_document_id               NUMBER;
      l_item_key                  wf_items.item_key%TYPE;
      l_next_approver_id          NUMBER;
      l_next_approver_name        per_employees_current_x.full_name%TYPE;
      l_next_approver_user_name   VARCHAR2 (100);
      l_next_approver_disp_name   VARCHAR2 (240);
      l_orig_system               VARCHAR2 (48);
      l_org_id                    NUMBER;
      l_functional_currency       VARCHAR2 (30);
      l_transaction_type          po_document_types.ame_transaction_type%TYPE;
      n_varname                   wf_engine.nametabtyp;
      n_varval                    wf_engine.numtabtyp;
      t_varname                   wf_engine.nametabtyp;
      t_varval                    wf_engine.texttabtyp;
      l_no_positionholder         EXCEPTION;
      l_preparer_user_name        fnd_user.user_name%TYPE;
      l_doc_string                VARCHAR2 (200);
      l_start_block_activity      VARCHAR2 (1);
      l_has_fyi_app               VARCHAR2 (1);
      l_approver_index            NUMBER;
      l_first_position_id         NUMBER;
      l_first_approver_id         NUMBER;
      -- TTEC Custom Variable
      l_wf_process                wf_process_activities.process_name%TYPE;
   BEGIN
      IF (funcmode = 'RUN')
      THEN
         l_progress := 'Launch_Parallel_Approval: 001';

         IF (g_po_wf_debug = 'Y')
         THEN
            po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
         END IF;

         l_document_id :=
            po_wf_util_pkg.getitemattrnumber (itemtype      => itemtype,
                                              itemkey       => itemkey,
                                              aname         => 'DOCUMENT_ID'
                                             );
         l_org_id :=
            po_wf_util_pkg.getitemattrnumber (itemtype      => itemtype,
                                              itemkey       => itemkey,
                                              aname         => 'ORG_ID'
                                             );
         l_start_block_activity := 'N';
         l_has_fyi_app := 'N';
         -- Iterate through the list of next approvers.
         l_approver_index := g_next_approvers.FIRST ();

         -- TTEC Custom - Launch Custom WF Process if customs enabled, otherwise launch standard WF Process
         IF    fnd_profile.VALUE ('PO_USE_CUSTOM_APPROVAL') = 'Y'
            OR ttec_business_rules.use_custom (l_document_id)
         THEN
            l_wf_process := 'TTEC_AME_PARALLEL_APPROVAL';
         ELSE
            l_wf_process := 'AME_PARALLEL_APPROVAL';
         END IF;

         -- End TTEC Custom
         WHILE (l_approver_index IS NOT NULL)
         LOOP
            l_progress :=
                  'Launch_Parallel_Approval: 002 -- Next Approver :'
               || g_next_approvers (l_approver_index).NAME;

            IF (g_po_wf_debug = 'Y')
            THEN
               po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
            END IF;

            SELECT    TO_CHAR (l_document_id)
                   || '-'
                   || TO_CHAR (po_wf_itemkey_s.NEXTVAL)
              INTO l_item_key
              FROM SYS.DUAL;

            -- Create a child process for the retrieved approver.
            -- TTEC Custom - replace hard coded 'AME_PARALLEL_APPROVAL' process with l_wf_process set above.
            wf_engine.createprocess (itemtype      => itemtype,
                                     itemkey       => l_item_key,
                                     process       => l_wf_process
                                    );
            /* Need to set the parent child relationship between processes */
            wf_engine.setitemparent (itemtype             => itemtype,
                                     itemkey              => l_item_key,
                                     parent_itemtype      => itemtype,
                                     parent_itemkey       => itemkey,
                                     parent_context       => NULL
                                    );
            t_varname (1) := 'DOCUMENT_TYPE';
            t_varval (1) := 'REQUISITION';
            t_varname (2) := 'DOCUMENT_SUBTYPE';
            t_varval (2) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'DOCUMENT_SUBTYPE'
                                              );
            t_varname (3) := 'PREPARER_USER_NAME';
            t_varval (3) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'PREPARER_USER_NAME'
                                              );
            t_varname (4) := 'PREPARER_DISPLAY_NAME';
            t_varval (4) :=
               po_wf_util_pkg.getitemattrtext
                                             (itemtype      => itemtype,
                                              itemkey       => itemkey,
                                              aname         => 'PREPARER_DISPLAY_NAME'
                                             );
            t_varname (5) := 'FUNCTIONAL_CURRENCY';
            t_varval (5) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'FUNCTIONAL_CURRENCY'
                                              );
            t_varname (6) := 'IS_AME_APPROVAL';
            t_varval (6) := 'Y';
            t_varname (7) := 'TOTAL_AMOUNT_DSP';
            t_varval (7) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'TOTAL_AMOUNT_DSP'
                                              );
            t_varname (8) := 'FORWARD_FROM_DISP_NAME';
            t_varval (8) :=
               po_wf_util_pkg.getitemattrtext
                                            (itemtype      => itemtype,
                                             itemkey       => itemkey,
                                             aname         => 'FORWARD_FROM_DISP_NAME'
                                            );
            t_varname (9) := 'FORWARD_FROM_USER_NAME';
            t_varval (9) :=
               po_wf_util_pkg.getitemattrtext
                                            (itemtype      => itemtype,
                                             itemkey       => itemkey,
                                             aname         => 'FORWARD_FROM_USER_NAME'
                                            );
            t_varname (10) := 'REQ_DESCRIPTION';
            t_varval (10) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'REQ_DESCRIPTION'
                                              );
            t_varname (11) := 'REQ_AMOUNT_CURRENCY_DSP';
            t_varval (11) :=
               po_wf_util_pkg.getitemattrtext
                                           (itemtype      => itemtype,
                                            itemkey       => itemkey,
                                            aname         => 'REQ_AMOUNT_CURRENCY_DSP'
                                           );
            t_varname (12) := 'TAX_AMOUNT_CURRENCY_DSP';
            t_varval (12) :=
               po_wf_util_pkg.getitemattrtext
                                           (itemtype      => itemtype,
                                            itemkey       => itemkey,
                                            aname         => 'TAX_AMOUNT_CURRENCY_DSP'
                                           );
            t_varname (13) := 'JUSTIFICATION';
            t_varval (13) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'JUSTIFICATION'
                                              );
            t_varname (14) := 'CONTRACTOR_REQUISITION_FLAG';
            t_varval (14) :=
               po_wf_util_pkg.getitemattrtext
                                       (itemtype      => itemtype,
                                        itemkey       => itemkey,
                                        aname         => 'CONTRACTOR_REQUISITION_FLAG'
                                       );
            t_varname (15) := 'CONTRACTOR_REQUISITION_FLAG';
            t_varval (15) :=
               po_wf_util_pkg.getitemattrtext
                                       (itemtype      => itemtype,
                                        itemkey       => itemkey,
                                        aname         => 'CONTRACTOR_REQUISITION_FLAG'
                                       );
            t_varname (16) := 'CONTRACTOR_STATUS';
            t_varval (16) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'CONTRACTOR_STATUS'
                                              );
            t_varname (17) := 'VENDOR_DISPLAY_NAME';
            t_varval (17) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'VENDOR_DISPLAY_NAME'
                                              );
            t_varname (18) := 'IS_SUPPLIER_EMAIL_NOT_AVAIL';
            t_varval (18) :=
               po_wf_util_pkg.getitemattrtext
                                       (itemtype      => itemtype,
                                        itemkey       => itemkey,
                                        aname         => 'IS_SUPPLIER_EMAIL_NOT_AVAIL'
                                       );
            t_varname (19) := 'CONTRACTOR_ASSIGNMENT_REQD';
            t_varval (19) :=
               po_wf_util_pkg.getitemattrtext
                                        (itemtype      => itemtype,
                                         itemkey       => itemkey,
                                         aname         => 'CONTRACTOR_ASSIGNMENT_REQD'
                                        );
            t_varname (20) := 'DOCUMENT_NUMBER';
            t_varval (20) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'DOCUMENT_NUMBER'
                                              );
            t_varname (21) := 'AME_TRANSACTION_TYPE';
            t_varval (21) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'AME_TRANSACTION_TYPE'
                                              );
            l_progress :=
                  'Launch_Parallel_Approval: 003 -- Record Type :'
               || g_next_approvers (l_approver_index).orig_system;

            IF (g_po_wf_debug = 'Y')
            THEN
               po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
            END IF;

            -- Check whether Position Hierarchy or Employee-Sup Hierarchy setup or FND users.
            IF (g_next_approvers (l_approver_index).orig_system =
                                                        ame_util.perorigsystem
               )
            THEN
               l_next_approver_id :=
                           g_next_approvers (l_approver_index).orig_system_id;
            ELSIF (g_next_approvers (l_approver_index).orig_system =
                                                        ame_util.posorigsystem
                  )
            THEN
               BEGIN
                  SELECT first_position_id, first_approver_id
                    INTO l_first_position_id, l_first_approver_id
                    FROM po_requisition_headers_all
                   WHERE l_document_id = requisition_header_id;

                  IF (    l_first_position_id IS NOT NULL
                      AND l_first_position_id =
                             g_next_approvers (l_approver_index).orig_system_id
                     )
                  THEN
                     l_next_approver_id := l_first_approver_id;

                     SELECT full_name
                       INTO l_next_approver_name
                       FROM per_all_people_f person
                      WHERE person_id = l_first_approver_id
                        --Bug#7207213#This query fetches multiple records so adding a filter
                        AND TRUNC (SYSDATE) BETWEEN person.effective_start_date
                                                AND NVL
                                                      (person.effective_end_date,
                                                       TRUNC (SYSDATE)
                                                      );
                  ELSE
                     /* find the persond id from the position_id*/
                     SELECT person_id, full_name
                       INTO l_next_approver_id, l_next_approver_name
                       FROM (SELECT   person.person_id, person.full_name
                                 FROM per_all_people_f person,
                                      per_all_assignments_f asg
                                WHERE asg.position_id =
                                         g_next_approvers (l_approver_index).orig_system_id
                                  AND TRUNC (SYSDATE)
                                         BETWEEN person.effective_start_date
                                             AND NVL
                                                   (person.effective_end_date,
                                                    TRUNC (SYSDATE)
                                                   )
                                  AND person.person_id = asg.person_id
                                  AND asg.primary_flag = 'Y'
                                  AND asg.assignment_type IN ('E', 'C')
                                  AND (   person.current_employee_flag = 'Y'
                                       OR person.current_npw_flag = 'Y'
                                      )
                                  AND asg.assignment_status_type_id NOT IN (
                                         SELECT assignment_status_type_id
                                           FROM per_assignment_status_types
                                          WHERE per_system_status =
                                                                 'TERM_ASSIGN')
                                  AND TRUNC (SYSDATE)
                                         BETWEEN asg.effective_start_date
                                             AND asg.effective_end_date
                             ORDER BY person.last_name)
                      WHERE ROWNUM = 1;
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     RAISE;
               END;
            ELSIF (g_next_approvers (l_approver_index).orig_system =
                                                    ame_util.fnduserorigsystem
                  )
            THEN
               SELECT employee_id
                 INTO l_next_approver_id
                 FROM fnd_user
                WHERE user_id =
                            g_next_approvers (l_approver_index).orig_system_id
                  AND TRUNC (SYSDATE) BETWEEN start_date
                                          AND NVL (end_date, SYSDATE + 1);
            END IF;

            t_varname (22) := 'AME_APPROVER_TYPE';
            t_varval (22) := g_next_approvers (l_approver_index).orig_system;
            wf_directory.getusername (ame_util.perorigsystem,
                                      l_next_approver_id,
                                      l_next_approver_user_name,
                                      l_next_approver_disp_name
                                     );
            l_progress :=
                  'Launch_Parallel_Approval: 004 -- Next Approver User Name -- display Name:'
               || l_next_approver_user_name
               || ' -- '
               || l_next_approver_disp_name;

            IF (g_po_wf_debug = 'Y')
            THEN
               po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
            END IF;

            --bug6843383 start
            IF (g_next_approvers (l_approver_index).orig_system =
                                                        ame_util.perorigsystem
               )
            THEN
               t_varname (23) := 'APPROVER_USER_NAME';
               t_varval (23) := g_next_approvers (l_approver_index).NAME;
               t_varname (24) := 'APPROVER_DISPLAY_NAME';
               t_varval (24) :=
                             g_next_approvers (l_approver_index).display_name;
            ELSE
               t_varname (23) := 'APPROVER_USER_NAME';
               t_varval (23) := l_next_approver_user_name;
               t_varname (24) := 'APPROVER_DISPLAY_NAME';
               t_varval (24) := l_next_approver_disp_name;
            END IF;

            /* Kick off the process */
            l_progress :=
                         '30: start_wf_line_process: Kicking off StartProcess';

            IF (g_po_wf_debug = 'Y')
            THEN
               po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
            END IF;

            t_varname (25) := 'AME_IS_FYI_APPROVER';

            IF (g_next_approvers (l_approver_index).approver_category =
                                                  ame_util.fyiapprovercategory
               )
            THEN
               t_varval (25) := 'Y';
               l_has_fyi_app := 'Y';
               l_start_block_activity := 'N';
            ELSE
               t_varval (25) := 'N';

               IF (l_has_fyi_app = 'N')
               THEN
                  -- only start BLOCK if there are no FYI approvers
                  l_start_block_activity := 'Y';
               END IF;
            END IF;

            t_varname (26) := 'VIEW_REQ_DTLS_URL';
            t_varval (26) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'VIEW_REQ_DTLS_URL'
                                              );
            t_varval (26) := t_varval (26) || '&' || 'item_key=' || l_item_key;
            t_varname (27) := 'EDIT_REQ_URL';
            t_varval (27) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'EDIT_REQ_URL'
                                              );
            t_varval (27) := t_varval (27) || '&' || 'item_key=' || l_item_key;
            t_varname (28) := 'RESUBMIT_REQ_URL';
            t_varval (28) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'RESUBMIT_REQ_URL'
                                              );
            t_varname (28) := 'OPEN_FORM_COMMAND';
            t_varval (28) :=
               po_wf_util_pkg.getitemattrtext (itemtype      => itemtype,
                                               itemkey       => itemkey,
                                               aname         => 'OPEN_FORM_COMMAND'
                                              );
            -- Set the item attributes.
            wf_engine.setitemattrtextarray (itemtype,
                                            l_item_key,
                                            t_varname,
                                            t_varval
                                           );
            n_varname (1) := 'DOCUMENT_ID';
            n_varval (1) := l_document_id;
            n_varname (2) := 'ORG_ID';
            n_varval (2) := l_org_id;
            n_varname (3) := 'AME_APPROVER_ID';
            n_varval (3) := g_next_approvers (l_approver_index).orig_system_id;
            n_varname (4) := 'APPROVER_EMPID';
            n_varval (4) := l_next_approver_id;
            -- Set the approval group id as 1 for adhoc approvers
            n_varname (5) := 'APPROVAL_GROUP_ID';

            IF (g_next_approvers (l_approver_index).api_insertion = 'Y')
            THEN
               n_varval (5) := 1;
            ELSE
               n_varval (5) :=
                        g_next_approvers (l_approver_index).group_or_chain_id;
            END IF;

            wf_engine.setitemattrnumberarray (itemtype,
                                              l_item_key,
                                              n_varname,
                                              n_varval
                                             );
            wf_engine.setitemattrdocument
               (itemtype        => itemtype,
                itemkey         => l_item_key,
                aname           => 'ATTACHMENT',
                documentid      => (wf_engine.getitemattrdocument
                                                        (itemtype      => itemtype,
                                                         itemkey       => itemkey,
                                                         aname         => 'ATTACHMENT'
                                                        )
                                   )
               );
            l_progress :=
                   'Launch_Parallel_Approval: 005 -- Launch Parallel Approval';

            IF (g_po_wf_debug = 'Y')
            THEN
               po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_progress);
            END IF;

            wf_engine.startprocess (itemtype      => itemtype,
                                    itemkey       => l_item_key
                                   );
            l_approver_index := g_next_approvers.NEXT (l_approver_index);
         END LOOP;                                         -- end of for loop.

         IF l_start_block_activity = 'Y'
         THEN
            resultout := 'COMPLETE' || ':' || 'ACTIVITY_PERFORMED';
         ELSE
            resultout := 'COMPLETE' || ':' || '';
         END IF;

         g_next_approvers.DELETE;
         RETURN;
      END IF;                                                       --run mode
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         l_progress :=
                      '50: start_wf_line_process: NO_DATA_FOUND -- EXCEPTION';
         l_doc_string :=
               l_progress
            || po_reqapproval_init1.get_error_doc (itemtype, itemkey);
         l_preparer_user_name :=
               po_reqapproval_init1.get_preparer_user_name (itemtype, itemkey);
         wf_core.CONTEXT ('POR_AME_REQ_WF_PVT',
                          'Launch_Parallel_Approval-NO_DATA_FOUND Exception:',
                          l_progress,
                          SQLERRM
                         );

         IF (g_po_wf_debug = 'Y')
         THEN
            po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_doc_string);
         END IF;

         po_reqapproval_init1.send_error_notif
                                       (itemtype,
                                        itemkey,
                                        l_preparer_user_name,
                                        l_doc_string,
                                        SQLERRM,
                                        'POR_AME_REQ_WF_PVT.GET_NEXT_APPROVER'
                                       );
         RAISE;
      WHEN OTHERS
      THEN
         l_progress := '50: start_wf_line_process: IN EXCEPTION';
         l_doc_string :=
               l_progress
            || po_reqapproval_init1.get_error_doc (itemtype, itemkey);
         l_preparer_user_name :=
               po_reqapproval_init1.get_preparer_user_name (itemtype, itemkey);
         wf_core.CONTEXT ('POR_AME_REQ_WF_PVT',
                          'Launch_Parallel_Approval-Unexpected Exception:',
                          l_progress,
                          SQLERRM
                         );

         IF (g_po_wf_debug = 'Y')
         THEN
            po_wf_debug_pkg.insert_debug (itemtype, itemkey, l_doc_string);
         END IF;

         po_reqapproval_init1.send_error_notif
                                       (itemtype,
                                        itemkey,
                                        l_preparer_user_name,
                                        l_doc_string,
                                        SQLERRM,
                                        'POR_AME_REQ_WF_PVT.GET_NEXT_APPROVER'
                                       );
         RAISE;
   END launch_parallel_approval;
END ttec_po_req_wf;
/
show errors;
/